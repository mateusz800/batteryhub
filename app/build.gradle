apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'
//apply plugin: 'com.google.firebase.crashlytics'
apply from: 'checkstyle.gradle'
//apply plugin: 'com.google.gms.google-services'


// Check if can build a release config
def canBuildRelease = rootProject.file('keystore.properties').exists()

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load keystore file for release build config
if (canBuildRelease) {
    // Load your keystore.properties file into the keystoreProperties object.
    keystoreProperties.load(new FileInputStream(rootProject.file('keystore.properties')))
}

android {
    compileSdkVersion project.compileSdkVersion.toInteger()
    signingConfigs {
        debug {
            // Explicit debug key for Travis CI automation
            keyAlias 'GreenHubDebugKey'
            keyPassword 'greenhub_debug'
            storeFile file('greenhub-debug.jks')
            storePassword 'greenhub_debug'
        }
        if (canBuildRelease) {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }
    defaultConfig {
        applicationId 'com.hmatalonga.greenhub'
        minSdkVersion project.minSdkVersion.toInteger()
        targetSdkVersion project.targetSdkVersion.toInteger()
        versionCode project.versionCode.toInteger()
        versionName project.versionName
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        signingConfig signingConfigs.debug
        vectorDrawables {
            useSupportLibrary true
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
        if (canBuildRelease) {
            release {
                debuggable false
                minifyEnabled true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.release
                zipAlignEnabled true
                shrinkResources true
            }
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
        kotlinCompilerVersion '1.5.21'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    // Include libraries checked into the libs directory.
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.google.android.material:material:1.5.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.0'
    //implementation 'com.google.firebase:firebase-crashlytics:17.2.1'
    //implementation 'com.google.firebase:firebase-analytics:17.5.0'
    // Dependencies for android tests which reside in the "androidTest" src folder.
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation 'com.google.code.findbugs:jsr305:3.0.2'
    // Dependencies for unit tests which reside in the "tests" src folder.
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:4.0.0'
    // Android support libraries.
    implementation "com.android.support:appcompat-v7:${androidSupportLibVersion}"
    implementation "com.android.support:design:${androidSupportLibVersion}"
    implementation "com.android.support:support-v4:${androidSupportLibVersion}"
    implementation "com.android.support:support-v13:${androidSupportLibVersion}"
    implementation "com.android.support:cardview-v7:${androidSupportLibVersion}"
    implementation "com.android.support:recyclerview-v7:${androidSupportLibVersion}"
    // JSON utility library.
    implementation 'com.google.code.gson:gson:2.8.5'
    // Retrofit library for networking operations
    implementation 'com.squareup.retrofit2:retrofit:2.1.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'
    // greenrobot for event communications
    implementation 'org.greenrobot:eventbus:3.0.0'
    // MPAndroidChart library for drawing charts
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    // Android Processes library
    implementation 'com.jaredrummler:android-processes:1.0.9'
    // crashlytics
    // Lingver - for managing app locale and language
    implementation "com.github.YarikSOffice:lingver:1.3.0"

    ///// jetpack compose
    // Integration with activities
    implementation 'androidx.activity:activity-compose:1.4.0'
    // Compose Material Design
    implementation 'androidx.compose.material:material:1.0.5'
    // Animations
    implementation 'androidx.compose.animation:animation:1.0.5'
    // Tooling support (Previews, etc.)
    implementation 'androidx.compose.ui:ui-tooling:1.0.5'
    // Integration with ViewModels
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.4.0'
    // UI Tests
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.0.5'
}
repositories {
    mavenCentral()
}